Accessing all elements inside int[][] a = {{5,2,9},{4,6,8}}; using fo loop?
    Answer:
    public class Access2DArray {
        public static void main(String[] args) {
            // Initialize the 2D array
            int[][] a = {{5, 2, 9}, {4, 6, 8}};

            // Access elements using nested loops
            for (int i = 0; i < a.length; i++) {
                for (int j = 0; j < a[i].length; j++) {
                    // Access individual element
                    int element = a[i][j];
                    System.out.print(element + " ");
                }
                System.out.println(); // Move to the next line after each row
            }
        }
    }

Assign different values say integer, character, string etc into single array?
    Answer:
    public class MixedArray {
        public static void main(String[] args) {
            // Create an array of objects
            Object[] mixedArray = new Object[5];

            // Assign different values to the array
            mixedArray[0] = 42;            // Integer
            mixedArray[1] = 'a';            // Character
            mixedArray[2] = "Hello";        // String
            mixedArray[3] = 3.14;           // Double
            mixedArray[4] = true;           // Boolean

            // Access and print the values
            for (Object value : mixedArray) {
                System.out.println(value);
            }
        }
    }


What is the disadvantage of array?
    Answer:
    Arrays in Java have certain limitations and disadvantages. They are fixed in size, making dynamic resizing
    challenging, and they can only store elements of the same data type. The lack of built-in methods for insertion
    and deletion in the middle of an array can result in inefficiency, and arrays allocate memory for a fixed number
    of elements, leading to potential memory wastage. Moreover, arrays lack flexibility in terms of size and type, and
    accessing an index beyond the array's bounds can cause runtime errors. While arrays remain fundamental and efficient
    in specific scenarios, other data structures like ArrayList or LinkedList provide more flexibility for dynamic data
    management.

What is the difference between equals() and == operator?
    Answer:
    The equals() method in Java is used to compare the content or values of two objects for equality. It is overridden
    by many classes to provide meaningful comparison based on the object's attributes. On the other hand, the == operator
    compares the memory addresses of two objects to check if they refer to the same object instance. While equals() is
    often customized for specific classes to compare content, == checks for reference equality. In the case of primitive
    data types, == compares their values. In summary, equals() is used for content-based equality, and == is used for
    reference equality or value comparison for primitive types.

What is the purpose of using Wrapper classes in Java?
    Answer:
    Wrapper classes in Java serve several purposes, primarily related to enhancing the flexibility and compatibility of
    data types in object-oriented programming. They allow primitive data types to be converted into objects, enabling
    compatibility with collections that work with objects rather than primitive types. Wrapper classes also facilitate
    the representation of null values, provide methods for data manipulation, support generics by allowing the use of
    primitive types in generic classes and methods, and play a role in reflection when examining or manipulating class
    structures at runtime. In summary, wrapper classes bridge the gap between primitive types and objects, offering
    additional functionality and compatibility in various aspects of Java programming.

How to capture screen-shot in Selenium WebDriver?
    Answer:
    The TakesScreenshot interface is used to capture screenshots.
    You can save the screenshot to a file or perform any other desired actions with the captured image.

What is Automation Testing?
    Answer:
    Automation testing refers to the use of automated tools and scripts to perform testing tasks in software development.
    Instead of manually executing test cases, automation testing involves the creation and execution of scripts that
    simulate user interactions with the software. The primary goals of automation testing are to improve efficiency,
    reduce human errors, and accelerate the testing process.

What is the difference between Manual and Automation Testing?
    Answer:
    Manual testing involves human testers executing test cases without the use of automation tools, relying on their
    judgment and exploration. It is effective for exploratory testing and user experience evaluation. In contrast,
    automation testing employs scripts and tools to perform repetitive and regression tests, offering efficiency,
    repeatability, and speed. While manual testing is flexible and intuitive, automation excels in handling large test
    suites and frequent code changes. A balanced testing strategy often integrates both manual and automated testing to
    leverage their respective strengths.

What are primitive data types in Java?
    Answer: In Java, primitive data types are basic data types that represent single values. They are not objects and do
    not have methods. The primitive data types in Java are: int, double, float, byte, short, long, char,

Can we create an object for an interface?
    Answer:
    Regarding creating an object for an interface, directly creating an object of an interface is not possible in Java.
    However, you can create an object reference of an interface type and assign it to an object of a class that implements
    that interface.

Can we create an object for an abstract class?
    Answer:
    No, you cannot create an object directly for an abstract class in Java. Abstract classes are designed to be
    incomplete and are meant to be extended by concrete subclasses. They may contain abstract methods that lack
    implementation and can only be defined in subclasses.

Can we write Webdriver driver = new Webdriver(); ?
    Answer: No, you cannot write WebDriver driver = new WebDriver(); directly because WebDriver is an interface in
    Selenium, and interfaces cannot be instantiated using the new keyword.
    instead, you need to use a class that implements the WebDriver interface, such as ChromeDriver, FirefoxDriver, or
    other browser-specific drivers

What is the purpose of using Constructors in Java?
    Answer:
    Constructors in Java serve the purpose of initializing objects. They are special methods within a class that
    are called when an object of that class is created using the new keyword.

How Constructors are different from Methods in Java?
    Answer:
    Constructors and methods in Java serve distinct purposes within a class. Constructors are special methods used for
    initializing object state during object creation, have no return type, and are implicitly invoked using the new
    keyword. Methods, on the other hand, define behaviors, may have a return type, and are explicitly called using an
    object reference or class name. Constructors can be overloaded to provide multiple initialization options, and they
    play a crucial role in inheritance. While constructors handle object setup, methods encapsulate the behavior of
    objects, and both contribute to the overall functionality of a Java class.

What is the purpose of using ‘this’ keyword in Java?
    Abswer:
    this keyword is used to call or accessed the current class members (variable or method)
    this keyword is required when we have a parameter with same name as an instance variable or field
    NOTE: we can use either of them anywhere in a class, except for a static element, like a static method, any attempt to do so can create a compile time error
    This is commonly used in constructor when the instance variable name and parameter passed in the contractor has the same name.
    this() method is used to call a contractor from another overloaded contractor in the same class
    Call of this() is only be used in a contractor, and it has to be the first executable statement in the constructor
    this() method is used in a constructor method chaining

what is Overloading in Java?
    Answer:
    In Java, method overloading refers to the ability to define multiple methods in the same class with the same name
    but different parameter lists. The parameters may differ in their number, types, or both. When a method is called,
    the appropriate version of the method is selected based on the provided arguments. Overloading provides flexibility
    and clarity in method design, allowing developers to create methods with similar functionality that can handle different
    types of inputs. It enhances code readability and promotes code reuse by accommodating various scenarios within the
    same method name.

What is the purpose of using Packages in Java?
    Answer:
    Packages in Java serve the purpose of organizing and structuring classes and interfaces into a hierarchical structure.
    They provide a way to group related classes, making it easier to manage and maintain large codebases. Packages help
    avoid naming conflicts, as classes with the same name can coexist if they belong to different packages. Additionally,
    packages support access control by allowing the use of access modifiers like public, private, and protected. This
    enhances encapsulation and code security. By organizing code into packages, developers can create modular and reusable
    components, improving code organization, readability, and maintenance in Java projects.

    Keyword used by Java class to inherit the properties of another
    Class?
    Answer: extends keyword

    How to access the variables and methods of another Class in
    Java?
    Answer: using inheritance

    What is Overriding in Java?
    In Java, method overriding occurs when a subclass provides a specific implementation for a method that is already
    defined in its superclass. The overridden method in the subclass must have the same method signature (name, return type,
    and parameters) as the one in the superclass. This allows the subclass to provide its own specialized behavior while maintaining a
    relationship with the superclass. Method overriding is a key feature of polymorphism, allowing objects of the subclass to be treated
    as objects of the superclass. It enhances code flexibility and adaptability by allowing different classes to provide their own
    implementations of common methods defined in a shared superclass.


    Is Overriding applicable for Constructors in Java?
    Answer: No, overriding is not applicable to constructors in Java.